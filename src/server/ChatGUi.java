package server;


import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ScrollPaneConstants;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author taioli Francesco rappresenta la classe per inviare , ricevere i
 * messaggi
 */
public class ChatGUi extends javax.swing.JFrame {

    /**
     * Creates new form IndixisGui
     */
    public ChatGUi(String username, String password) {
        this.username = username;
        this.password = password;
        initComponents();
        registrazione(username, password);
        inizialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        addFriend = new javax.swing.JButton();
        removeFriends = new javax.swing.JButton();
        friendRequestList = new javax.swing.JButton();
        numberOfRequest = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        friend = new javax.swing.JPanel();
        tab = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageText = new javax.swing.JTextPane();
        inviaTesto = new javax.swing.JButton();
        inviaFoto = new javax.swing.JButton();
        indixis = new javax.swing.JLabel();
        inviaFile = new javax.swing.JButton();
        inviaAudio = new javax.swing.JButton();
        user = new javax.swing.JLabel();
        information = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(100, 181, 246));
        setMaximumSize(new java.awt.Dimension(900, 700));
        setMinimumSize(new java.awt.Dimension(900, 700));
        setPreferredSize(new java.awt.Dimension(900, 700));
        setResizable(false);

        title.setBackground(new java.awt.Color(100, 181, 246));
        title.setPreferredSize(new java.awt.Dimension(900, 88));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        addFriend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/indixis/img/add.png"))); // NOI18N
        addFriend.setText("Add");
        addFriend.setBorder(null);
        addFriend.setMaximumSize(new java.awt.Dimension(100, 30));
        addFriend.setMinimumSize(new java.awt.Dimension(100, 30));
        addFriend.setPreferredSize(new java.awt.Dimension(100, 30));
        addFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriendActionPerformed(evt);
            }
        });

        removeFriends.setIcon(new javax.swing.ImageIcon(getClass().getResource("/indixis/img/remove.png"))); // NOI18N
        removeFriends.setText("Remove");
        removeFriends.setMaximumSize(new java.awt.Dimension(100, 30));
        removeFriends.setMinimumSize(new java.awt.Dimension(100, 30));
        removeFriends.setPreferredSize(new java.awt.Dimension(100, 30));
        removeFriends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFriendsActionPerformed(evt);
            }
        });

        friendRequestList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/indixis/img/request.png"))); // NOI18N
        friendRequestList.setText("View request");
        friendRequestList.setMaximumSize(new java.awt.Dimension(130, 30));
        friendRequestList.setMinimumSize(new java.awt.Dimension(130, 30));
        friendRequestList.setPreferredSize(new java.awt.Dimension(130, 30));
        friendRequestList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendRequestListActionPerformed(evt);
            }
        });

        numberOfRequest.setBackground(new java.awt.Color(204, 204, 255));
        numberOfRequest.setForeground(new java.awt.Color(0, 51, 51));
        numberOfRequest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numberOfRequest.setText("0");
        numberOfRequest.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        numberOfRequest.setOpaque(true);

        javax.swing.GroupLayout titleLayout = new javax.swing.GroupLayout(title);
        title.setLayout(titleLayout);
        titleLayout.setHorizontalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titleLayout.createSequentialGroup()
                .addGap(580, 580, 580)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeFriends, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(titleLayout.createSequentialGroup()
                        .addComponent(addFriend, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(friendRequestList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numberOfRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        titleLayout.setVerticalGroup(
            titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(titleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(friendRequestList, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFriend, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberOfRequest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeFriends, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        menu.setBackground(new java.awt.Color(100, 181, 246));

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        friend.setBackground(new java.awt.Color(227, 242, 253));
        friend.setMaximumSize(new java.awt.Dimension(190, 536));
        friend.setMinimumSize(new java.awt.Dimension(190, 536));
        friend.setPreferredSize(new java.awt.Dimension(190, 536));

        javax.swing.GroupLayout friendLayout = new javax.swing.GroupLayout(friend);
        friend.setLayout(friendLayout);
        friendLayout.setHorizontalGroup(
            friendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );
        friendLayout.setVerticalGroup(
            friendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tab.setBackground(new java.awt.Color(255, 255, 255));
        tab.setForeground(new java.awt.Color(0, 153, 102));
        tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tab.setAutoscrolls(true);
        tab.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tab.setInheritsPopupMenu(true);
        tab.setMaximumSize(new java.awt.Dimension(600, 600));
        tab.setMinimumSize(new java.awt.Dimension(500, 600));

        messageText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                messageTextKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(messageText);

        inviaTesto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/indixis/img/telegram-logo.png"))); // NOI18N
        inviaTesto.setMaximumSize(new java.awt.Dimension(75, 40));
        inviaTesto.setMinimumSize(new java.awt.Dimension(75, 40));
        inviaTesto.setPreferredSize(new java.awt.Dimension(75, 40));
        inviaTesto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inviaTestoMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                inviaTestoMouseReleased(evt);
            }
        });
        inviaTesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviaTestoActionPerformed(evt);
            }
        });
        inviaTesto.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                inviaTestoPropertyChange(evt);
            }
        });
        inviaTesto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inviaTestoKeyReleased(evt);
            }
        });

        inviaFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/indixis/img/image.png"))); // NOI18N
        inviaFoto.setMaximumSize(new java.awt.Dimension(75, 40));
        inviaFoto.setMinimumSize(new java.awt.Dimension(75, 40));
        inviaFoto.setPreferredSize(new java.awt.Dimension(75, 40));
        inviaFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviaFotoActionPerformed(evt);
            }
        });

        indixis.setText("INDIXIS");

        inviaFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/indixis/img/attachment.png"))); // NOI18N
        inviaFile.setMaximumSize(new java.awt.Dimension(75, 40));
        inviaFile.setMinimumSize(new java.awt.Dimension(75, 40));
        inviaFile.setPreferredSize(new java.awt.Dimension(75, 40));
        inviaFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviaFileActionPerformed(evt);
            }
        });

        inviaAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/indixis/img/microphone.png"))); // NOI18N
        inviaAudio.setMaximumSize(new java.awt.Dimension(75, 40));
        inviaAudio.setMinimumSize(new java.awt.Dimension(75, 40));
        inviaAudio.setPreferredSize(new java.awt.Dimension(75, 40));
        inviaAudio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inviaAudioMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                inviaAudioMouseReleased(evt);
            }
        });
        inviaAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviaAudioActionPerformed(evt);
            }
        });

        user.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 24)); // NOI18N

        information.setText("Your list of friends");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(indixis, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(friend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(526, 526, 526))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inviaTesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inviaFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inviaAudio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inviaFile, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(91, 91, 91))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(information, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(indixis, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(information, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inviaAudio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(inviaFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inviaTesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(inviaFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(friend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 730, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inviaTestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviaTestoActionPerformed
        String text = messageText.getText();
        ChatPaneMsgBox paneRight = new ChatPaneMsgBox(lenControl(text), true, TypeMessage.MESSAGGIO);
        addPanel(paneRight);

        messageText.setText("");;

        String localUser = user.getText();
        String destinatario = tab.getTitleAt(0);
        Calendar now = Calendar.getInstance();
        int day = now.get(Calendar.DAY_OF_MONTH);
        int hour = now.get(Calendar.HOUR_OF_DAY);
        Message message = new Message(localUser, text, destinatario, hour, day, TypeMessage.MESSAGGIO, false);
        addMessage(message);
        Connection.inviaMessaggio(text, destinatario);
    }//GEN-LAST:event_inviaTestoActionPerformed

    private void inviaFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviaFotoActionPerformed
        String localUser = user.getText();
        String destinatario = tab.getTitleAt(0);
        Calendar now = Calendar.getInstance();
        int day = now.get(Calendar.DAY_OF_MONTH);
        int hour = now.get(Calendar.HOUR_OF_DAY);
        JFileChooser filechooser = new JFileChooser();
        
        int returnValue = filechooser.showOpenDialog(null); //del parent maggiore
        if (returnValue == filechooser.APPROVE_OPTION) {
        
            
        Path from = Paths.get(filechooser.getSelectedFile().getAbsolutePath());
        Path dest = Paths.get(Connection.pathSendImage+filechooser.getSelectedFile().getName());
        System.out.println("dest"+dest);
        System.out.println("from"+from);
        
            try {
                Files.copy(from,dest,StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {
                Logger.getLogger(ChatGUi.class.getName()).log(Level.SEVERE, null, ex);
            }
       
        ChatPaneMsgBox paneLeft = new ChatPaneMsgBox(dest.toString(), true, TypeMessage.FOTO);
        addPanel(paneLeft);
        
        Connection.invioFile(dest.toString(),destinatario, TypeMessage.FOTO);
        connection.insertFile(filechooser.getSelectedFile().getAbsolutePath(), tab.getTitleAt(0), TypeMessage.FOTO);
        }
    }//GEN-LAST:event_inviaFotoActionPerformed

    private void inviaTestoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inviaTestoMousePressed
        if (evt.getClickCount() == 1) {
            System.out.println(evt.getClass());
        }
    }//GEN-LAST:event_inviaTestoMousePressed

    private void inviaTestoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inviaTestoMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_inviaTestoMouseReleased

    private void inviaTestoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inviaTestoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_inviaTestoKeyReleased

    private void inviaTestoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_inviaTestoPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_inviaTestoPropertyChange

    private void messageTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextKeyReleased

    }//GEN-LAST:event_messageTextKeyReleased

    private void inviaFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviaFileActionPerformed
        JFileChooser filechooser = new JFileChooser();
        int returnValue = filechooser.showOpenDialog(null); //del parent maggiore
        if (returnValue == filechooser.APPROVE_OPTION) {
            System.out.println(filechooser.getSelectedFile().getAbsolutePath());;
            Connection.invioFile(filechooser.getSelectedFile().getAbsolutePath(), tab.getTitleAt(0), TypeMessage.FILE);
            connection.insertFile(filechooser.getSelectedFile().getAbsolutePath(), tab.getTitleAt(0), TypeMessage.FILE);
        }
    }//GEN-LAST:event_inviaFileActionPerformed

    private void inviaAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviaAudioActionPerformed
        JFileChooser filechooser = new JFileChooser();
        int returnValue = filechooser.showOpenDialog(null); //del parent maggiore
        if (returnValue == filechooser.APPROVE_OPTION) {
            System.out.println(filechooser.getSelectedFile().getAbsolutePath());;
            Connection.invioFile(filechooser.getSelectedFile().getAbsolutePath(), tab.getTitleAt(0), TypeMessage.AUDIO);
        }
    }//GEN-LAST:event_inviaAudioActionPerformed

    private void friendRequestListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendRequestListActionPerformed

        if (Ricezione.friendsListWithoutAnswer.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Non sono presenti richieste di amicizia");
        } else {
            new RichiesteDiAmicizia();
        }
    }//GEN-LAST:event_friendRequestListActionPerformed

    private void removeFriendsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFriendsActionPerformed
        new RemoveFriend(this);
    }//GEN-LAST:event_removeFriendsActionPerformed

    private void addFriendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriendActionPerformed
        new AddFriend(this);
    }//GEN-LAST:event_addFriendActionPerformed

    private void inviaAudioMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inviaAudioMousePressed

    }//GEN-LAST:event_inviaAudioMousePressed

    private void inviaAudioMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inviaAudioMouseReleased

    }//GEN-LAST:event_inviaAudioMouseReleased

    /**
     * setta il nome dell'utente nella barra titolo
     *
     * @param userName
     */
    public void setUser(String userName) {
        user.setText("Bentornato, " + userName);
    }

    /**
     * aggiunge un messaggio al array
     *
     * @param messaggio
     */
    public void addMessage(Message messaggio) {

        
        listaMessaggi.add(messaggio);
        try {
            setMessage();
        } catch (IOException ex) {
            Logger.getLogger(ChatGUi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * modifica il label di notifica di un utente
     *
     * @param user
     */
    public void addNotify(String user) {
        if(!user.equals(tab.getTitleAt(0))){
        JLabel k = new JLabel();
        int i = Integer.valueOf((String) notifiche.get(user));
        k = (JLabel) (counterNotifiche.get(i));
        String numberOfCurrentNotify = k.getText();
        String text = String.valueOf(Integer.parseInt(numberOfCurrentNotify) + 1);
        k.setText(text);
        }
    }

    private boolean registrazione(String username, String password) {
        MessageDigest md;

        try {
            md = MessageDigest.getInstance("MD5");
            byte[] passBytes = password.getBytes();
            md.reset();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < passBytes.length; i++) {
                sb.append(Integer.toHexString(0xff & passBytes[i]));
            }
            password = sb.toString();
        } catch (NoSuchAlgorithmException ex) {
            System.out.println("Errore creazione hash password");
        }

        connection = new Connection(5555, "127.0.0.1", username, password, "login", this);

        return true;
    }

    /**
     * setta la lista degli amici
     * @param listaAmici
     */
    public void setFriendsListArray(ArrayList<String> listaAmici) {
        friend.removeAll();
        ar = listaAmici;
        amici();

        friend.setLayout(new BoxLayout(friend, BoxLayout.Y_AXIS));
        friend.setVisible(true);
        friend.revalidate();
        friend.repaint();
    }

    /**
     * setta gli amici, aggiunge i label delle notifche in un array
     */
    public void amici() {
        int x = 0;
        friend.setLayout(new FlowLayout(FlowLayout.LEADING, 0, 0));
        for (int i = 0; i < ar.size(); i++) {
            String text = (String) ar.get(i).toString();

            //notifiche
            notifiche.put(text, String.valueOf(i));
            
            JLabel notify = new JLabel("0");
            notify.setFont(new java.awt.Font("Traditional Arabic", 0, 18));
            notify.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            notify.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            notify.setPreferredSize(new java.awt.Dimension(15, 30));
            notify.setOpaque(true);
            notify.setBackground(new Color(126, 225, 230));
//            notify.set
            counterNotifiche.add(notify);
            
            JLabel label = new JLabel((String) ar.get(i).toString());
            label.setFont(new java.awt.Font("Traditional Arabic", 0, 18));
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            label.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            label.setPreferredSize(new java.awt.Dimension(175, 30));
            label.setOpaque(true);
            label.setBackground(new Color(126, 225, 230));
            label.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent evt){
                    label.setBackground(new java.awt.Color(92, 255, 179));
                }
                
                @Override
                public void mouseReleased(MouseEvent evt){
                    label.setBackground(new Color(126, 225, 230));
                    notify.setText("0");
                    //panelMessage.setBackground(Color.LIGHT_GRAY);
                    arrayTab.add(tab);
                    if (x == 0) {
                        tab.addTab(text, scroll);

                    } else {
                        int index = tab.getSelectedIndex();
                        tab.setTitleAt(0, text);
                    }
                    try {
                        setMessage();
                    } catch (IOException ex) {
                        Logger.getLogger(ChatGUi.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            
            //panelFriend.add(label);
            
            /*
            JButton button = new JButton((String) ar.get(i).toString());

            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent ae) {
                    notify.setText("0");
                    //panelMessage.setBackground(Color.LIGHT_GRAY);
                    arrayTab.add(tab);
                    if (x == 0) {
                        tab.addTab(text, scroll);

                    } else {
                        int index = tab.getSelectedIndex();
                        tab.setTitleAt(0, text);
                    }
                    try {
                        setMessage();
                    } catch (IOException ex) {
                        Logger.getLogger(ChatGUi.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println("--------------------------------------------");
                }
            });*/
            JPanel p = new JPanel();
            p.setLayout(new FlowLayout(FlowLayout.LEADING, 0, 0));
            p.setMaximumSize(new Dimension(190, 30));
            p.add(label);
            p.add(notify);
            friend.add(p);
            System.out.println((String) ar.get(i).toString());
        }
    }

    public void riceviAmicizia(String username) {
        setNumberOfRequest();
        //startSound("request.wav");
        JOptionPane.showMessageDialog(null, "Hai ricevuto una richiesta d'amicizia da " + username + "vai nell'apposita sezione per accettare");
    }

    public void nuovoAmico(String username) {
        JOptionPane.showMessageDialog(null, username + " è un tuo nuovo amico ! Ora puoi chattarci !!!");
    }

    public void rimozioneAmico(String username) {
        JOptionPane.showMessageDialog(null, username + " non è più tuo amico :(");
    }

    /**
     * setta i messagi nel panel in corrispondenza dell utente
     * riconosce i messagi in entrata e in uscita
     * @throws FileNotFoundException
     * @throws IOException 
     */
    public void setMessage() throws FileNotFoundException, IOException {
        String destinatario = tab.getTitleAt(0);
        panelMessage.removeAll();
        //add your elements
        panelMessage.revalidate();
        panelMessage.repaint();
        ChatPaneMsgBox defaultMessage = new ChatPaneMsgBox("Benvenuto in Indixis! inizia a chattare!", true, TypeMessage.MESSAGGIO);
        addPanel(defaultMessage);
        ChatPaneMsgBox defaultMessage2 = new ChatPaneMsgBox("Scrivi subito ai tuoi amici!", false, TypeMessage.MESSAGGIO);
        addPanel(defaultMessage2);

        
        
        for (int i = 0; i < listaMessaggi.size(); i++) {
        
             if (listaMessaggi.get(i).getDestinatario().equals(destinatario) || listaMessaggi.get(i).getUser().equals(destinatario)) {
            System.out.println(listaMessaggi.get(i).toString());

            Message mex = listaMessaggi.get(i);
            String pathOrText = "";
            if (mex.getType() == TypeMessage.AUDIO || mex.getType() == TypeMessage.FILE || mex.getType() == TypeMessage.FOTO) {
                pathOrText = Ricezione.pathFileReceived + listaMessaggi.get(i).getFilename();
            } else {
                pathOrText = mex.getMessage();
            }

            ChatPaneMsgBox paneLeft = new ChatPaneMsgBox(pathOrText, mex.isForeign(), mex.getType());
            addPanel(paneLeft);
            }
        }
        //sposta lo scrool in corrispondena dell'ultimo mess
         Rectangle rect = panelMessage.getBounds();
                Rectangle r2 = scroll.getViewport().getVisibleRect();
                panelMessage.scrollRectToVisible(new Rectangle((int) rect.getWidth(), 
                        (int) rect.getHeight(), (int) r2.getWidth(), (int) r2.getHeight()));
    }

    /**
     * aggiunge un boxPanel al pannello dei messaggi
     *
     * @param panel
     */
    private void addPanel(Component panel) {
        panelMessage.add(panel);
        panelMessage.revalidate();
        panelMessage.repaint();
    }

 

    /**
     * controlla la lughezza del messaggio, se > di 44 va a capo
     *
     * @param message
     * @return
     */
    private String lenControl(String message) {

        String newMessage = "<html>";
        String[] splitMessage;
        if (message.length() > 44) {
            splitMessage = message.split(" ");
            for (int i = 0; i < splitMessage.length - 1; i++) {
                if (i == 1) {
                    newMessage += splitMessage[i];
                } else {
                    newMessage += " " + splitMessage[i];
                }
            }
            System.out.println("################################PRIMAAA#" + " " + newMessage);
            newMessage += "<br>" + splitMessage[splitMessage.length - 1] + "</html>";

        }
        System.out.println("##############################################" + " " + newMessage);
        return newMessage;
    }

    /**
     * fa partire un suono che avvisa l'arrivo di un messaggio
     *
     * @param sound
     */
//    private void startSound(String sound) {
//        try {
//            AudioInputStream audioIn = AudioSystem.getAudioInputStream(ChatGUi.class.getResource(sound));
//            Clip clip = AudioSystem.getClip();
//            clip.open(audioIn);
//            clip.start();
//        } catch (Exception ex) {
//            Logger.getLogger(ChatGUi.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//    }

    /**
     * setta i bottoni circolari
     */
    private void setCircolar() {
        addFriend.setBorder(new RoundedBorder(10));
        removeFriends.setBorder(new RoundedBorder(10));
        friendRequestList.setBorder(new RoundedBorder(10));
         inviaFile.setBorder(new RoundedBorder(10));
         inviaFoto.setBorder(new RoundedBorder(10));
         inviaTesto.setBorder(new RoundedBorder(10));
        inviaAudio.setBorder(new RoundedBorder(10));
    }

    /**
     * setta i il font material di google- roboto-thin.ttf
     */
    private void setFont() {
        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("Roboto-thin.ttf"));
            indixis.setFont(font.deriveFont(Font.BOLD, 48f));
            information.setFont(font.deriveFont(Font.BOLD, 22f));
           
        } catch (FontFormatException ex) {
            Logger.getLogger(ChatGUi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatGUi.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * metodo usato per settare delle impostazioni
     */
    public void inizialize() {
        panelMessage = new JPanel();
       
        setCircolar();
        setFont();
             friend.setBackground(new java.awt.Color(227, 242, 253));
        System.out.println("################################################aggiutno");
        panelMessage.setLayout(new BoxLayout(panelMessage, BoxLayout.Y_AXIS));
        
        scroll.setViewportView(panelMessage);
        

    }

    /**
     * setta il numero delle richieste di amicizia
     */
    public void setNumberOfRequest() {
        numberOfRequest.setText(String.valueOf(Ricezione.friendsListWithoutAnswer.size()));

    }

    /**
     * setta la lista dei messagi
     * @param messaggi 
     */
    public void setListaMessaggi(ArrayList messaggi) {
        listaMessaggi = messaggi;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFriend;
    private javax.swing.JPanel friend;
    private javax.swing.JButton friendRequestList;
    private javax.swing.JLabel indixis;
    private javax.swing.JLabel information;
    private javax.swing.JButton inviaAudio;
    private javax.swing.JButton inviaFile;
    private javax.swing.JButton inviaFoto;
    private javax.swing.JButton inviaTesto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel menu;
    private javax.swing.JTextPane messageText;
    private javax.swing.JLabel numberOfRequest;
    private javax.swing.JButton removeFriends;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JPanel title;
    public javax.swing.JLabel user;
    // End of variables declaration//GEN-END:variables
    public static ArrayList ar = new ArrayList();
    public ArrayList arrayTab = new ArrayList();
    private String username;
    private String password;
    private Connection connection;
    private JPanel panelMessage;
    int v = ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;
    int h = ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS;
    JScrollPane scroll = new JScrollPane(v, h);
    private List<Message> listaMessaggi = new ArrayList();
    LinkedHashMap notifiche = new LinkedHashMap();
    private List<JLabel> counterNotifiche = new ArrayList();
    private AudioRecorder audioRecorder;
    private Thread threadForAudio;
}
